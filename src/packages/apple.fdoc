@tangler objc.fpc                  = $PWD/src/config/macosx/objc.fpc
@tangler foundation.fpc            = $PWD/src/config/macosx/foundation.fpc
@tangler appkit.fpc                = $PWD/src/config/macosx/appkit.fpc
@tangler cocoa.fpc                 = $PWD/src/config/macosx/cocoa.fpc
@tangler corefoundation.fpc        = $PWD/src/config/macosx/corefoundation.fpc
@tangler audiounit.fpc             = $PWD/src/config/macosx/audiounit.fpc
@tangler audiotoolbox.fpc          = $PWD/src/config/macosx/audiotoolbox.fpc


@tangler AppleOS.flx               = share/lib/std/apple/AppleOS.flx
@tangler Foundation.flx            = share/lib/std/apple/Foundation.flx
@tangler AppKit.flx                = share/lib/std/apple/AppKit.flx
@tangler Cocoa.flx                 = share/lib/std/apple/Cocoa.flx
@tangler AudioUnit.flx             = share/lib/std/apple/AudioUnit.flx


@title Apple Specific Config
@h1 Apple Frameworks

@tangle Foundation.flx
open class Foundation
{
  requires 
    package "objc",
    package "foundation"
  ;

  // Data types
  type id = "id";

  type NSObject = "NSObject*";
  supertype id : NSObject = "$1";
  fun description : NSObject -> NSString = "[$1 description]";

  type NSString = "NSString*";
  supertype NSObject : NSString = "$1";
  instance Str[NSString] {
    fun str : NSString -> string = "::std::string([$1 cStringUsingEncoding:NSUTF8StringEncoding])";
  }

  type NSNumber = "NSNumber*";;
  supertype NSObject : NSNumber = "$1";


  type NSArray = "NSArray*";
  supertype NSObject : NSArray = "$1";
  ctor[N:UNITSUM] NSArray : NSObject^N = "[NSArray arrayWithObjects:$a,nil]";

  // Selector
  type SEL = "SEL";
  fun sel_getName : SEL  -> +char = "sel_getName($1)";

  instance Str[SEL] {
    fun str (sel: SEL) : string  => string (sel_getName sel);
  } 
  fun selector : string -> SEL = '@@selector($i)';
 
  // Debug output
  proc NSLog : NSString * ... = 'NSLog($a);';
  proc NSLog[T] : T = 'NSLog(@@"%@@",$1);';
}
@

@tangle AppleOS.flx
open class AppleOS {
  type OSStatus= "OSStatus";
  const noErr: OSStatus = "noErr";
  typedef OSType = uint;
  instance Eq[OSStatus] { 
    fun == : OSStatus * OSStatus -> bool = "$1==$2";
  }
}
@

@tangle AudioUnit.flx
include "std/apple/AppleOS";
open class AudioUnitAPI {
  requires package "audiounit";

  // We're not using this here so I'll just provide a binding with no access methods
  type AudioTimeStamp = "AudioTimeStamp";

  // binds to C type of same name, defines
  // the enumeration constants,
  // and provides equality (needed for pattern matches)
  // and also all standard C bitwise operations
  cflags AudioUnitRenderActionFlags = 
    kAudioUnitRenderAction_PreRender,
    kAudioUnitRenderAction_PostRender,
    kAudioUnitRenderAction_OutputIsSilence,
    kAudioOfflineUnitRenderAction_Preflight,
    kAudioOfflineUnitRenderAction_Render,
    kAudioOfflineUnitRenderAction_Complete,
    kAudioUnitRenderAction_PostRenderError,
    kAudioUnitRenderAction_DoNotCheckRenderArgs
  ;
   

  // Manually define this structure
  type AudioBufferList = "AudioBufferList*";
  fun mNumberBuffers: AudioBufferList -> uint32 = "$1->mNumberBuffers";
  fun mBuffers: AudioBufferList -> +AudioBuffer = "$1->mBuffers";

  // Manually define this structure too
  type AudioBuffer = "AudioBuffer*";
  fun mDataByteSize : AudioBuffer -> uint32 = "$1->mDataByteSize";
  fun mNumberChannels : AudioBuffer -> uint32 = "$1->mNumberChannels";
  fun mData : AudioBuffer -> address = "$1->mData";

  // Some core Audio Unit Description parts
  const kAudioUnitType_Output: OSType;
  const kAudioUnitSubType_HALOutput: OSType;
  const kAudioUnitManufacturer_Apple: OSType;

  // Audio Component Descriptor
  cstruct AudioComponentDescription {
    componentType: OSType;
    componentSubType: OSType;
    componentManufacturer: OSType;
    componentFlags: uint32;
    componentFlagsMask: uint32;
  };

  // Audio Component Locators
  ctypes AudioComponent;
  fun AudioComponentFindNext : AudioComponent * &AudioComponentDescription -> AudioComponent;
  fun AudioComponentFindFirst: &AudioComponentDescription -> AudioComponent =
    "AudioComponentFindNext(NULL,$1)"
  ;
  fun isValid: AudioComponent -> bool = "!($1==NULL)";

  ctypes AudioComponentInstance;
  typedef AudioUnit = AudioComponentInstance;

  // Property IDs
  typedef AudioUnitPropertyID = uint32;
  const kAudioUnitProperty_SetRenderCallback : AudioUnitPropertyID;
  const kAudioOutputUnitProperty_EnableIO : AudioUnitPropertyID;
  const kAudioUnitProperty_StreamFormat: AudioUnitPropertyID;

  // Scopes
  typedef AudioUnitScope = uint32;
  const kAudioUnitScope_Input : AudioUnitScope;

  // Elements
  typedef AudioUnitElement = uint32;
  val GlobalElement = 0;

  gen AudioUnitSetProperty:
    AudioUnit * 
    AudioUnitPropertyID *
    AudioUnitScope * 
    AudioUnitElement *
    address * uint32 // property data
    -> OSStatus
  ;

}

@tangle AppKit.flx
include "std/apple/Foundation";

open class AppKit
{
  requires package "appkit";
  type NSSound = "NSSound*";
  type NSColor = "NSColor*";

  fun loadSound(filename:NSString)=>
    cexpr[NSSound] """
       [
         [NSSound alloc] initWithContentsOfFile:$1 
         byReference:NO
       ]
    """ filename endcexpr
  ;
  proc play: NSSound = "[$1 play];";
}
@

@tangle Cocoa.flx
include "std/apple/Foundation";
open class Cocoa {
  requires package "cocoa";
  type NSWindow = "NSWindow*";
  fun getProcessName: 1 -> NSString = "[[NSProcessInfo processInfo] processName]";

  gen createTitledWindow : NSString * int * int * int * int -> NSWindow = """
    ([&](){
        NSWindow *x = [[NSWindow alloc] initWithContentRect:NSMakeRect(0, 0, $4, $5)
           styleMask:NSTitledWindowMask backing:NSBackingStoreBuffered defer:NO];
        [x cascadeTopLeftFromPoint:NSMakePoint($2,$3)];
        [x setTitle: $1];
        [x makeKeyAndOrderFront:nil];
        return x;
        }())
  """; // Note use of C++ lambda

  // Starts main event loop
  // do NOT confuse with Felix run procedure which creates a scheduler to run fibres
  proc run : 1 = "[NSApp run];"; 
}
@

@tangle foundation.fpc
Name: Foundation
Description: Foundation
Requires: objc
includes: '<Foundation/Foundation.h>'
provides_dlib: ---framework=Foundation
provides_slib: ---framework=Foundation
@

@tangle appkit.fpc
Name: AppKit 
Description: AppKit
Requires: foundation 
includes: '<AppKit/AppKit.h>'
provides_dlib: ---framework=AppKit
provides_slib: ---framework=AppKit
@

@tangle cocoa.fpc
Name: Cocoa
Description: Cocoa
Requires: foundation
includes: '<Cocoa/Cocoa.h>'
provides_dlib: ---framework=Cocoa
provides_slib: ---framework=Cocoa
@


@tangle corefoundation.fpc
Name: CoreFoundation
Description: CoreFoundation
provides_dlib: ---framework=CoreFoundation
provides_slib: ---framework=CoreFoundation
@

@tangle audiounit.fpc
Name: AudioUnit
Description: AudioUnit C API
includes: '<AudioUnit/AudioUnit.h>'
provides_dlib: ---framework=AudioUnit
provides_slib: ---framework=AudioUnit
@


@tangle audiotoolbox.fpc
Name: AudioToolbox
Description: AudioToolbox
provides_dlibs: ---framework=AudioToolbox
provides_slibs: ---framework=AudioToolbox
@

@tangle objc.fpc
Name: ObjC Runtime
Description: run time library for objective C
cflags: -ObjC++
provides_dlib: /usr/lib/libobjc.dylib
provides_slib: /usr/lib/libobjc.a
includes: '"/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/objc/runtime.h"'


 
