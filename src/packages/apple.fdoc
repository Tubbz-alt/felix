@tangler objc.fpc                  = $PWD/src/config/macosx/objc.fpc
@tangler foundation.fpc            = $PWD/src/config/macosx/foundation.fpc
@tangler appkit.fpc                = $PWD/src/config/macosx/appkit.fpc
@tangler cocoa.fpc                 = $PWD/src/config/macosx/cocoa.fpc
@tangler corefoundation.fpc        = $PWD/src/config/macosx/corefoundation.fpc
@tangler audiotoolbox.fpc          = $PWD/src/config/macosx/audiotoolbox.fpc


@tangler Foundation.flx            = share/lib/std/apple/Foundation.flx
@tangler AppKit.flx                = share/lib/std/apple/AppKit.flx
@tangler Cocoa.flx                 = share/lib/std/apple/Cocoa.flx


@title Apple Specific Config
@h1 Apple Frameworks

@tangle Foundation.flx
open class Foundation
{
  requires 
    package "objc",
    package "foundation"
  ;

  // Data types
  type id = "id";

  type NSObject = "NSObject*";
  supertype id : NSObject = "$1";

  type NSString = "NSString*";
  supertype NSObject : NSString = "$1";

  type NSNumber = "NSNumber*";;
  supertype NSObject : NSNumber = "$1";


  type NSArray = "NSArray*";
  supertype NSObject : NSArray = "$1";
  ctor[N:UNITSUM] NSArray : NSObject^N = "[NSArray arrayWithObjects:$a,nil]";

  // Selector
  type SEL = "SEL";
  fun sel_getName : SEL  -> +char = "sel_getName($1)";

  instance Str[SEL] {
    fun str (sel: SEL) : string  => string (sel_getName sel);
  } 
  fun selector : string -> SEL = '@@selector($i)';
 
  // Debug output
  proc NSLog : NSString * ... = 'NSLog($a);';
  proc NSLog[T] : T = 'NSLog(@@"%@@",$1);';
}
@
@tangle AppKit.flx
include "std/apple/Foundation";

open class AppKit
{
  requires package "appkit";
  type NSSound = "NSSound*";
  type NSColor = "NSColor*";

  fun loadSound(filename:NSString)=>
    cexpr[NSSound] """
       [
         [NSSound alloc] initWithContentsOfFile:$1 
         byReference:NO
       ]
    """ filename endcexpr
  ;
  proc play: NSSound = "[$1 play];";
}
@

@tangle Cocoa.flx
include "std/apple/Foundation";
open class Cocoa {
  requires package "cocoa";
  type NSWindow = "NSWindow*";
  fun getProcessName: 1 -> NSString = "[[NSProcessInfo processInfo] processName]";

  gen createTitledWindow : NSString * int * int * int * int -> NSWindow = """
    ([&](){
        NSWindow *x = [[NSWindow alloc] initWithContentRect:NSMakeRect(0, 0, $4, $5)
           styleMask:NSTitledWindowMask backing:NSBackingStoreBuffered defer:NO];
        [x cascadeTopLeftFromPoint:NSMakePoint($2,$3)];
        [x setTitle: $1];
        [x makeKeyAndOrderFront:nil];
        return x;
        }())
  """; // Note use of C++ lambda

  // Starts main event loop
  // do NOT confuse with Felix run procedure which creates a scheduler to run fibres
  proc run : 1 = "[NSApp run];"; 
}
@

@tangle foundation.fpc
Name: Foundation
Description: Foundation
includes: '<Foundation/Foundation.h>'
provides_dlib: ---framework=Foundation
provides_slib: ---framework=Foundation
@

@tangle appkit.fpc
Name: AppKit 
Description: AppKit
Requires: foundation 
includes: '<AppKit/AppKit.h>'
provides_dlib: ---framework=AppKit
provides_slib: ---framework=AppKit
@

@tangle cocoa.fpc
Name: Cocoa
Description: Cocoa
Requires: foundation
includes: '<Cocoa/Cocoa.h>'
provides_dlib: ---framework=Cocoa
provides_slib: ---framework=Cocoa
@


@tangle corefoundation.fpc
Name: CoreFoundation
Description: CoreFoundation
provides_dlib: ---framework=CoreFoundation
provides_slib: ---framework=CoreFoundation
@

@tangle audiotoolbox.fpc
Name: AudioToolbox
Description: AudioToolbox
provides_dlibs: ---framework=AudioToolbox
provides_slibs: ---framework=AudioToolbox
@

@tangle objc.fpc
Name: ObjC Runtime
Description: run time library for objective C
cflags: -ObjC++
provides_dlib: /usr/lib/libobjc.dylib
provides_slib: /usr/lib/libobjc.a
includes: '"/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/objc/runtime.h"'


 
