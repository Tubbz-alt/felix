
header small_class_interface = c"""
#import <Foundation/Foundation.h>
@interface SmallClass: NSObject { }
- (int)get1977;
@end
""";

body small_class_implementation = c"""
@implementation SmallClass
- (instancetype)init {
	self = [super init];
	return self;
}
- (int)get1977 {
	return 1977;
}
@end
""";

type small_class_instance_t = "void*"  requires 
  small_class_interface, 
  small_class_implementation,
  package "objc",
  package "foundation"
;

fun make_small_class_instance:
  1 -> small_class_instance_t 
= 
  "[[SmallClass alloc] init]"
;

fun get1977 : small_class_instance_t -> int = "[$1 get1977]";

var small_class_instance = make_small_class_instance();
var result = get1977 small_class_instance;
println$ "Felix ran objc to get " + result.str;

type NSString = "NSString*";

var s = @"An NS String";
var icode = @"get 1977 %i";

	//NSLog(@"get 1977: %i", [s get1977]);

proc NSLogInt : NSString * int = "NSLog($1,$2);";
proc NSLogStr: NSString = "NSLog($1);";

NSLogInt (icode, result);
NSLogStr (s);

type NSObject = "NSObject*";
type NSArray = "NSArray*";
ctor[N:UNITSUM] NSArray : NSObject^N = "[NSArray arrayWithObjects:$a,nil]";
var o = C_hack::cast[NSObject] @"hello";

var x = @[o,o,o];
proc NSLogArray: NSArray  = 'NSLog(@@"%@@",$1);';
NSLogArray x;

type SEL = "SEL";
fun sel_getName : SEL  -> +char = "sel_getName($1)";

instance Str[SEL] {
  fun str (sel: SEL) : string  => string (sel_getName sel);
} 
  
fun selector : string -> SEL = '@@selector($i)';
println$ selector "Hello";

